
Very Important Links TO Check Before We Dive In :

    1 - https://medium.com/@housecor/babel-6-cheat-sheet-7344f7936f2d
    2 - https://www.valentinog.com/blog/react-webpack-babel/
    3 - https://www.robinwieruch.de/minimal-react-webpack-babel-setup/
    4 - https://www.youtube.com/watch?v=uextYhQGP6k&index=2&list=PL55RiY5tL51oyA8euSROLjMFZbXaV7skS


/************************************************************************************************************************************************************************************************/
                                                                                    NPM

we have two types of node.js packages 
1 - libraries and frameworks      ex:   (jquery - react) they are dependencies (we use --save wiht them)
2 - development tools             ex:   (webpack,babel) it goes in the devDependencies because it's not a dependency like react or jquery (we use the --save-dev with tools)


node_modules folder contains dependencies of the dependencies we declared in the package.json file  


if you wanna share the project, the package.json file will contain info on the project's dependencies and you don't need to share and folders (node_modules)

production dependencies are deployed with your app. However development dependencies are left out in deployment.

when you first create a new project :
    1- npm init 
    2- start by installing production dependencies (--save tells the npm to save them in the production dependencies)
        npm install react react-dom --save

    3- then install development dependencies 
        npm install webpack webpack-dev-server babel-loader babel-preset-es2015 babel-preset-react babel-preset-stage-2 --save-dev



 ------------------------------ Commands

npm init                                    : creates a new project managed by npm (creates a package.json file )
npm run [npmScript]                         : to run a npm script (they live in the package.json)
npm install webpack --save-dev              : adds/installs it to devDependencies   (installed locally)
npm install webpack-cli --save-dev          : installs cli for webpack
nmp install webpack-dev-server              : automatically bundles the code and reloads the browser whenever a change is made
npm install jquery --save                   : adds/installs it to dependencies      (installed locally)
npm install                                 : it installs all the dependencies you have in the package.json file / creates the moudle directory
npm uninstall jquery --save                 : removes jquery from both the package.json and the dependencies folder
sudo npm install live-server --g            : globally =installs live-server (live-server in the terminal to run it)
npm install youtube-api-search              : given a key, it makes calls to the api and returns data



------------------------------Important Npm Packages and libraries
npm install youtube-api-search
sudo npm install live-server --g 
npm install jquery --save
npm install webpack-dev-server 
npm install --save loadash 
    watch 032 (react course)
import {connect} from 'react-redux'; 
npm install --save redux-promise (middleware)
npm install --save axios () (for Ajax calls)
npm install --save react-sparklines (for charts)
npm install --save react-google-maps
npm install --save google-map-react
npm install --save react-router@2.0.0-rc5
npm install --save redux-form@4.1.3
npm install --save uuid
npm install redux-logger --save (import logger from 'redux-logger) without {logger} coz it has a default export 

/************************************************************************************************************************************************************************************************/  
                                                                                    WepPack

* webpack core concepts :
    1 - Entry           : where it should start looking for dependencies. (there can be more than one entry point)
    2 - output          : where it should store the bundle file (or the bundles. if you have multiple entry points) 
    3 - module loaders  : transform our code (are applied on per file basis)
    4 - Plugins         : transform our code (it's applied on you bundle before it's output) an example would be 


* webpack understands es6 but it does not automatically transpile it. for that you would use babel

* 

* to use webpack we need to :
    
    1 - install node.js
    
    2 - run npm init 
    
    3 - add scripts in package.json file :
        "build" :     "webpack src/js/app.js dist/bundle.js", (this will manage all your import statements)
        "build:prod" :"webpack src/js/app.js dist/bundle.js -p" (for a minified version )
    
    4 - to run any of these scripts use ( npm run {scriptName} )

    5 - if you're using webpack-dev-server, alter your scripts above to use 'webpack-dev-server' command instead of 'webpack'
        "build" :     "webpack-dev-server --entry ./src/js/app.js --output-filename ./dist/bundle.js"

    6 - when use webpack-dev-server, you bundle.js file (or dist folder) will be generated in the server's memory and not on you local machine unless you run the build command 

    7 - we can also create a 'webpack.config.js' file which exports a javascript object using node.js syntax export for this 
        
        var path = require('path');
        module.exports = {
            entry: './src/js/app.js',
            output:{
                path: path.resolve(__dirname, 'dist') // we use the resolve method because the output path has to be absolute
                filename: 'bundle.js'
                publicPath: '/dist' // this tells the server where it should start looking for assets, by default it's '/' (without publicPath the dev-server will not pick up the correct path)
                                    // this is important as long as you are using dev-server.
            }
        }

    8 - when working with css Loader do the following : (notice that the css modules must be imported in the entry point file)
        - run npm install css-loader style-loader --save-dev
        - add the module in your webpack-config file 
        - each module has rules which is an array of rules, each rule is an object
            var path = require('path');
            module.exports = {
                entry: './src/js/app.js',
                output:{
                    path: path.resolve(__dirname, 'dist') // we use the resolve method because the output path has to be absolute
                    filename: 'bundle.js'
                    publicPath: '/dist' // this tells the server where it should start looking for assets, by default it's '/' (without publicPath the dev-server will not pick up the correct path)
                                        // this is important as long as you are using dev-server.
                },
                module:{
                    rules: [
                        {
                            test:/\.css$/,
                            loader: 'css-loader' // use this if you only have one loader
                            use:[ // use the 'use' property when you have multiple loaders to add. the order of the array is important (webpack loads the last element first)
                                'style-loader', // adds the css to the index.html file (inside the head tag) 
                                'css-loader' // loads css into javascript
                            ]
                        }
                    ]
                },
                plugins: [
                    new webpack.optimize.UglifyJsPlugin({
                        // ..
                    })
                ]
            }

    9 - when working with babel and scss :
        
        install the following packages (--save-dev)  :
            sass-loader                 : needed by the webpack
            node-sass                   : needed by sass-loader
            css-loader                  : loads css into javascript
            style-loader                : will inject the css into the head tag in the index.html file. (you should use extract-text-webpack-plugin instead)
            extract-text-webpack-plugin : puts all the compiled css code into a separated file, this way the css code would still work even if the javascript code does not, unlike style-loader which inject css in index.html

            babel-core                  : 
            babel-loader                ;
            babel-preset-env            :



        var path = require('path');
        module.exports = {
            entry: './src/js/app.js',
            output:{
                path: path.resolve(__dirname, 'dist') // we use the resolve method because the output path has to be absolute
                filename: 'bundle.js'
            },
            module:{
                rules:[
                    {
                        test: /\.js$/,
                        use: [

                        ]
                    }
                ]
            }
        }


npm install webpack --save-dev              : adds/installs it to devDependencies (--save-dev means you don't need it in production)
nmp install webpack-dev-server              : automatically bundles the code and reloads the browser whenever a change is made
npm install webpack-cli --save-dev          : installs cli for webpack
npm install html-webpack-plugin --save-dev  : automatically copies your index.html file into the distribution folder and inject bundle.js to it


in webpack there are four core concepts :
1 - Entry point 
2 - Output (takes an object, tha path needs to be absolute)
3 - Loaders
4 - Plugins 



in webpack 4 we have the development(builds the bundle without minifying) and the production mode (minifys)
you can specify the mode either in the package.json file (inside scripts) or in webpack.config.js file



when using the dev-server, the files will not be saved on the disk, instead they will be streamed to the server




/************************************************************************************************************************************************************************************************/
                                                                                Babel
basically installing babel is a three-step process :
1 - installing (babel-core, babel-polyfill, babel-preset-env, babel-loader)
2 - creating the module object and adding babel-polyfill as an entry point in webpack.config.js 
3 - creating babelrc file 

npm install babel-core babel-preset-env babel-loader --save-dev
npm install babel-polyfill --save (we use --save because it's a code dependency like jquery and react)

for since babel-polyfill is a code dependency we need to added to the entry point we have in
webpack.config.js file, so that it can be compiled together with our entries and eventually injected
in the html file

1 - babel-loader        : needed by the webpack
2 - babel-preset-env    : without any configuration options behaves ths same as (preset-es2015, preset-es2017) specifies the target browsers
3 - babel-core          : does the actual conversion. even though this package does the conversion it still needs some presets to tell it what features to convert (ex : babel-preset-env)
4 - babel-polyfill      : converts Es6 features like (promises)
5 - babel-preset-es2015 : (deprecated) use babel-preset-env
6 - babel-preset-react  : complies JSX






to use babel we need a json babel config file alongside with the webpack.config.js (.babelrc)

basic babel configuration in webpack.config.js : 
module:{
        rules:[ // takes an object
            {
                test: /\.js$/,
                exclude: /node_modules/,
                use:{
                    loader: 'babel-loader'
                }
            }
        ]
    }

basic babel configuration in .babelrc : 
{
    "presets": [ // takes an array of arrays
        ["env",{
            "targets":{
                "browsers":[
                    "last 5 versions",
                    "ie >=8"
                ]
            }
        }]
    ]
}
