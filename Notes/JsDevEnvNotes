
Very Important Links TO Check Before We Dive In :

    1 - https://medium.com/@housecor/babel-6-cheat-sheet-7344f7936f2d
    2 - https://www.valentinog.com/blog/react-webpack-babel/
    3 - https://www.robinwieruch.de/minimal-react-webpack-babel-setup/
    4 - https://www.youtube.com/watch?v=uextYhQGP6k&index=2&list=PL55RiY5tL51oyA8euSROLjMFZbXaV7skS


/************************************************************************************************************************************************************************************************/
                                                                                    NPM

we have two types of node.js packages 
1 - libraries and frameworks      ex:   (jquery - react) they are dependencies (we use --save wiht them)
2 - development tools             ex:   (webpack,babel) it goes in the devDependencies because it's not a dependency like react or jquery (we use the --save-dev with tools)


node_modules folder contains dependencies of the dependencies we declared in the package.json file  


if you wanna share the project, the package.json file will contain info on the project's dependencies and you don't need to share and folders (node_modules)

production dependencies are deployed with your app. However development dependencies are left out in deployment.

when you first create a new project :
    1- npm init 
    2- start by installing production dependencies (--save tells the npm to save them in the production dependencies)
        npm install react react-dom --save

    3- then install development dependencies 
        npm install webpack webpack-dev-server babel-loader babel-preset-es2015 babel-preset-react babel-preset-stage-2 --save-dev



 ------------------------------ Commands

npm init                                    : creates a new project managed by npm (creates a package.json file )
npm run [npmScript]                         : to run a npm script (they live in the package.json)
npm install webpack --save-dev              : adds/installs it to devDependencies   (installed locally)
npm install webpack-cli --save-dev          : installs cli for webpack
nmp install webpack-dev-server              : automatically bundles the code and reloads the browser whenever a change is made
npm install jquery --save                   : adds/installs it to dependencies      (installed locally)
npm install                                 : it installs all the dependencies you have in the package.json file / creates the moudle directory
npm uninstall jquery --save                 : removes jquery from both the package.json and the dependencies folder
sudo npm install live-server --g            : globally =installs live-server (live-server in the terminal to run it)
npm install youtube-api-search              : given a key, it makes calls to the api and returns data



------------------------------Important Npm Packages and libraries
npm install youtube-api-search
sudo npm install live-server --g 
npm install jquery --save
npm install webpack-dev-server 
npm install --save loadash 
    watch 032 (react course)
import {connect} from 'react-redux'; 
npm install --save redux-promise (middleware)
npm install --save axios () (for Ajax calls)
npm install --save react-sparklines (for charts)
npm install --save react-google-maps
npm install --save google-map-react
npm install --save react-router@2.0.0-rc5
npm install --save redux-form@4.1.3
npm install --save uuid
npm install redux-logger --save (import logger from 'redux-logger) without {logger} coz it has a default export 

/************************************************************************************************************************************************************************************************/  
                                                                                    WepPack


* never install webpack globally

* webpack core concepts :
    1 - Entry           : where it should start looking for dependencies. (there can be more than one entry point)
    2 - output          : where it should store the bundle file (or the bundles. if you have multiple entry points) 
    3 - module loaders  : transform our code (are applied on per file basis)
    4 - Plugins         : transform our code (it's applied on you bundle before it's output) an example would be 


* webpack understands es6 but it does not automatically transpile it. for that you would use babel

* 

* to use webpack we need to :
    
    1 - install node.js
    
    2 - run npm init 
    
    3 - add scripts in package.json file :
        "build" :     "webpack src/js/app.js dist/bundle.js", (this will manage all your import statements)
        "build:prod" :"webpack src/js/app.js dist/bundle.js -p" (for a minified version )
    
    4 - to run any of these scripts use ( npm run {scriptName} )

    5 - if you're using webpack-dev-server, alter your scripts above to use 'webpack-dev-server' command instead of 'webpack'
        "build" :     "webpack-dev-server --entry ./src/js/app.js --output-filename ./dist/bundle.js"

    6 - when use webpack-dev-server, you bundle.js file (or dist folder) will be generated in the server's memory and not on you local machine unless you run the build command 

    7 - we can also create a 'webpack.config.js' file which exports a javascript object using node.js syntax export for this 
        
        var path = require('path');
        module.exports = {
            entry: './src/js/app.js',
            output:{
                path: path.resolve(__dirname, 'dist') // we use the resolve method because the output path has to be absolute
                filename: 'bundle.js'
                publicPath: '/dist' // this tells the server where it should start looking for assets, by default it's '/' 
                                    
            }
        }

    8 - when working with css Loader do the following : (notice that the css modules must be imported in the entry point file)
        - run npm install css-loader style-loader --save-dev
        - add the module in your webpack-config file 
        - each module has rules which is an array of rules, each rule is an object

            var path = require('path');
            module.exports = {
                entry: './src/js/app.js',
                output:{
                    path: path.resolve(__dirname, 'dist') // we use the resolve method because the output path has to be absolute
                    filename: 'bundle.js'
                    publicPath: '/dist' // this tells the server where it should start looking for assets, by default it's '/' 
                },
                module:{
                    rules: [
                        {
                            test:/\.css$/,
                            loader: 'css-loader' // use this if you only have one loader
                            use:[ // use the 'use' property when you have multiple loaders to add. the order of the array is important (webpack loads the last element first)
                                'style-loader', // adds the css to the index.html file (inside the head tag) 
                                'css-loader' // loads css into javascript
                            ]
                        }
                    ]
                },
                plugins: [
                    new webpack.optimize.UglifyJsPlugin({
                        // ..
                    })
                ]
            }


    9 - when working with babel and scss :
        
        install the following packages (--save-dev)  :
            sass-loader                         : needed by the webpack
            node-sass                           : needed by sass-loader
            css-loader                          : knows how to deal with css imports
            style-loader                        : will inject the css into the head tag in the index.html file. (you should use extract-text-webpack-plugin instead)
            extract-text-webpack-plugin@2.1.2   : puts all the compiled css code into a separated file, this way the css code would still work even if the javascript 
                                                code does not, unlike style-loader which inject css in index.html

            babel-core                          : 
            babel-loader                        ;
            babel-preset-env                    :



        var path = require('path');
        var ExtractTextPlugin = require('extract-text-webpack-plugin');

        var extractPlugin = new ExtractTextPlugin({
            filename: 'main.css'
        });

        module.exports = {
            entry: './src/js/app.js',
            output:{
                path: path.resolve(__dirname, 'dist') // we use the resolve method because the output path has to be absolute
                filename: 'bundle.js',
                publicPath: '/dist';
            },
            module:{
                rules:[
                    {
                        test: /\.js$/,
                        use: [
                            {
                                loader:'babel-loader',
                                options: {
                                    presets:['env']
                                }
                            }
                        ]
                    },
                    {
                        test:/\.scss$/,
                        use: extractPlugin.extract({
                            use: ['css-loader','sass-loader']
                        })
                    }
                ]
            },
            plugins:[
                extractPlugin
            ]
        };



    10 - copying images and the index.html file from the scr to dist and automatically injecting the js and css on the fly without hard coding the tags in the index file.
         and regenerating the dist folder with every build

    run the following commands (--save-dev) :
    1 - html-loader             : 
    2 - html-webpack-plugin     : creates a new copy of the index.html file and copies it to the dist folder
    3 - file-loader             : to copy some files (images in this example)
    4 - clean-webpack-plugin    : regenerates the dist folder with every build



    var path = require('path');
    var ExtractTextPlugin = require('extract-text-webpack-plugin');
    var HtmlWebpackPlugin = require('html-webpack-plugin');
    var CleanWebpackPlugin = require('clean-webpack-plugin');

    var extractPlugin = new ExtractTextPlugin({
        filename: 'main.css'
    });
    
    module.exports = {
    entry: './src/js/app.js',
    output:{
        path: path.resolve(__dirname, 'dist') // we use the resolve method because the output path has to be absolute
        filename: 'bundle.js',
        // publicPath: '/dist'; we commented it out because the index.html will now be also generated in the dist folder 
    },
    module:{
        rules:[
            {
                test: /\.js$/,
                use: [
                    {
                        loader:'babel-loader',
                        options: {
                            presets:['env']
                        }
                    }
                ]
            },
            {
                test:/\.scss$/,
                use: extractPlugin.extract({
                    use: ['css-loader','sass-loader']
                })
            },
            {
                test:/\.html$/,
                use:['html-loader]
            },
            {
                test:/\.(jpg|png)$/,
                use:[
                    {
                        loader:'file-loader',
                        options:{
                            name:'[name].[ext]',     // by default file-loader would replace your filename with a random hash. but with this line it will keep the original name and extension
                            outputPath:'img/',       // by default this would be the dist directory
                            publicPath:'img/'        // if you get an error. try removing this line
                        }
                    }
                ]
            }
        ]
    },
    plugins:[
        extractPlugin,
        new HtmlWebpackPlugin({
            filename:'index.html',
            template: 'src/index.html'
        }),
        new CleanWebpackPlugin(['dist'])
    ]      

    }


    11 - webpack with multiple html files                       :   https://www.youtube.com/watch?v=y_RFOaSDL8I&index=6&list=PL55RiY5tL51rcCnrOrZixuOsZhAHHy6os

    12 - webpack with jquery or any other third=party library   :   https://www.youtube.com/watch?v=IYuh8hIyvfE&list=PL55RiY5tL51rcCnrOrZixuOsZhAHHy6os&index=7
         

    13 - webpack with babel (different approach using .babelrc)
        run the following command (--save-dev) :
        npm install --save-dev babel-core babel-preset-env babel-loader 

        instead of configuring babel in the webpack.config.js file. we can write the configurations in the .babelrc

        const path = require('path');

        webpack.config.js file :
            const config = {
            entry: './src/index.js',
            output: {
                path: path.resolve(__dirname, 'build'),
                filename: 'bundle.js'
            },
            module:{
                rules:[
                {
                    use:'babel-loader',
                    test:/\.js$/
                }
                ]
            }
            };

            module.exports = config;

        .babelrc file :
            {
              "presets": [
                "babel-preset-env"
              ]
            }

    
    14 - webpack with pure css (ExtractTextPlugin) and babel
    
        because loading css in a separate file is a lot more faster than loading it with the bundle file because of how the browser handles parallel download requests
        you should use the ExtractTextPlugin.

        npm install --save-dev extract-text-webpack-plugin@2.1.2


        const path = require('path');
        const ExtractTextPlugin = require('extract-text-webpack-plugin');

        const config = {
          entry: './src/index.js',
          output: {
            path: path.resolve(__dirname, 'build'),
            filename: 'bundle.js'
          },
          module: {
            rules: [
              {
                use: 'babel-loader',
                test: /\.js$/
              },
              {
                test: /\.css$/,
                // use: ['style-loader', 'css-loader']
                use: ExtractTextPlugin.extract({
                  fallback: 'style-loader',
                  use: 'css-loader'
                })
              }
            ]
          },
          plugins: [
            new ExtractTextPlugin('style/main.css')

          ]





        };

        module.exports = config;


    15 -importing images with webpack :
        
        for that we use two separate loaders :  
        1 - image-webpack-loader    : compresses the images (reduces the file size)

        2 - url-loader              : takes the compressed image and decides where to put the image
                                    if the image size is smaller than the limit you set it will be 
                                    put as row data in side the bundle.js.
                                    if it's larger it will be put inside the directory as normal pic
                                    via 'file-loader'.
                                    'file-loader' is the default fallback for url-loader

        3- file-loader              : needed in case the size is bigger than the limit set for url-loader
                                    it is the default fallback for url-loader

        4- publicPath               : it is used by any loader that produces a direct file path reference to a file in our output (dist) directory

        npm install --save-dev image-webpack-loader url-loader 
        if you have any dependency problem check out these links : 
            https://github.com/imagemin/mozjpeg-bin/issues/18
            https://github.com/imagemin/pngquant-bin/issues/78#issuecomment-373972847 
            https://github.com/StephenGrider/WebpackCasts/issues/1

        
        sudo dpkg -i /path/to/libpng12
        +
        sudo apt-get install -f

        webpackFile :
            const path = require('path');
            const ExtractTextPlugin = require('extract-text-webpack-plugin');

            const config = {
            entry: './src/index.js',
            output: {
                path: path.resolve(__dirname, 'build'),
                filename: 'bundle.js',
                publicPath: 'build/'
            },
            module: {
                rules: [
                {
                    use: 'babel-loader',
                    test: /\.js$/
                },
                {
                    test: /\.css$/,
                    // use: ['style-loader', 'css-loader']
                    use: ExtractTextPlugin.extract({
                    fallback: 'style-loader',
                    use: 'css-loader'
                    })
                },
                {
                    test: /\.(jpe?g|png|svg|gif)$/,
                    use: [
                    {
                        loader: 'url-loader',
                        options: { limit: 40000 }
                    },
                    'image-webpack-loader'
                    ]
                }
                ]
            },
            plugins: [
                new ExtractTextPlugin('style/main.css')

            ]

            };

            module.exports = config;
        
        babelrcFile :
            {
              "presets": [
                "babel-preset-env"
              ]
            }



    16- Code Splitting with webpack: (webpack2, webpack3 projects)

        There are two ways to split you code with webpack
            - using System.import()
                04 Building for performance with webpack
                webpack2 project 

            - by passing multiple Entry points
                05 Applying WebPack to a Real project
                webpack3 project

        some important plugins :

            webpack.CommonsChunkPlugin : removes the duplicate packages

            npm install --save-dev htmlwebpackplugin : regenerates the index.html with the correct script tags so that u don't have to hard code them

            npm install --save-dev rimraf           : handles inconsistencies in commands between different operating systems 
                                                    (check out CleanWebpackPlugin as well line206) 
                then go to your package.json file and add this script :
                    "build": "npm run clean && webpack",
                    "clean": "rimraf dist"
            
            

    17- webpack-dev-server :(webpack3 projects)

        watches for changes and rebuilds only the changed file.
        However, it does not watch for any changes made in the webpack.config.js
        and you have to restart the dev-server every time you make changes to webpack.config.js.
        




    18- Code Splitting with react router : (webpack3 projects)
        07 React-Specific-topics 
        042 + 043



    19- Deployment with Webpack :

        changes to make first : (in the plugins)
            - webpack.config.js
                new webpack.DefinePlugin({
                  'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV)
                })

            - package.json :
                "build": "NODE_ENV=production npm run clean && webpack -p",

        Deployment options :
            -static :
                Gitub pages 
                Amazon s3 (AWS S3)
                Digital Ocean
                Ms Azure
                surge (the easiest)
            -server-based providers :
                Amazon EC2
                Amazon ELB
                Digital Ocean
                Heroku
                Ms Azure

        Static Deployment :
            surge.sh :
                1- npm install -g surge
                2- npm run build
                3- surge -p dist

            
            Github Repo :

                1- run git init in the project directory

                2- run git add .

                3- run git commit -m ""

                4- git remote add origin <the Link>

                5- git checkout -b gh-pages

                6- git subtree push --prefix dist origin gh-pages (i just wanna push my dist dir to my origin and then to the gh-pages branch)
                
                7- to automate the deployment process : 
                        add the following script in the package.json :
                            "deploy": "npm run build && git subtree push --prefix dist origin gh-pages"

                8- Automatically served on :
                    https://<Username>.github.io/<RepoName></Username>



        server-based :
            - webpack-dev-server :
                is itself an express server which uses webpack-dev-middleware to serve the latest bundle and additionally 
                handles hot module replacement (HMR) requests for live module updates in the client.

            - webpack-dev-middleware : (with this we don't need to start a webpack server. we will only have one server (node.js))
                is middleware which can be mounted in an express server to serve the latest compilation of your bundle during 
                development. This uses webpack's Node API in watch mode and instead of outputting to the file system it outputs to memory.
                
                npm install --save-dev webpack-dev-middleware@1.9.0
                


            - webpack-hot-middleware :
                is an alternative to webpack-dev-server but instead of starting a server itself it allows you to mount it in 
                an existing / custom express server alongside webpack-dev-middleware.
                using this middleware, webpack will rebuild our project after every change we make, so we don't have to manually run webpack.

            - (webpack-hot-middleware & webpack-dev-middleware) or webpack-dev-server :
                these middleware don't handle server bundles meaning you need to frequently restart your server to see the latest 
                changes. to solve this problem we can use webpack-hot-server-middleware. 

            - webpack-hot-server-middleware :
                is designed to be used alongside webpack-dev-middleware and webpack-hot-middleware to handle hot module 
                replacement of server rendered apps.

            


                
                    













npm install webpack --save-dev              : adds/installs it to devDependencies (--save-dev means you don't need it in production)
nmp install webpack-dev-server              : automatically bundles the code and reloads the browser whenever a change is made
npm install webpack-cli --save-dev          : installs cli for webpack
npm install html-webpack-plugin --save-dev  : automatically copies your index.html file into the distribution folder and inject bundle.js to it


in webpack there are four core concepts :
1 - Entry point 
2 - Output (takes an object, tha path needs to be absolute)
3 - Loaders
4 - Plugins 



in webpack 4 we have the development(builds the bundle without minifying) and the production mode (minifys)
you can specify the mode either in the package.json file (inside scripts) or in webpack.config.js file



when using the dev-server, the files will not be saved on the disk, instead they will be streamed to the server




/************************************************************************************************************************************************************************************************/
                                                                                Babel
basically installing babel is a three-step process :
1 - installing (babel-core, babel-polyfill, babel-preset-env, babel-loader)
2 - creating the module object and adding babel-polyfill as an entry point in webpack.config.js 
3 - creating babelrc file 

npm install babel-core babel-preset-env babel-loader --save-dev
npm install babel-polyfill --save (we use --save because it's a code dependency like jquery and react)

for since babel-polyfill is a code dependency we need to added to the entry point we have in
webpack.config.js file, so that it can be compiled together with our entries and eventually injected
in the html file

1 - babel-loader        : needed by the webpack
2 - babel-preset-env    : without any configuration options behaves ths same as (preset-es2015, preset-es2017) specifies the target browsers
3 - babel-core          : knows how to take in code, parse it, and generate some output files. It still needs some presets to tell it what features to convert (ex : babel-preset-env)
4 - babel-polyfill      : converts Es6 features like (promises)
5 - babel-preset-es2015 : (deprecated) use babel-preset-env
6 - babel-preset-react  : complies JSX







to use babel we need a json babel config file alongside with the webpack.config.js (.babelrc)

basic babel configuration in webpack.config.js : 
module:{
        rules:[ // takes an object
            {
                test: /\.js$/,
                exclude: /node_modules/,
                use:{
                    loader: 'babel-loader'
                }
            }
        ]
    }

basic babel configuration in .babelrc : 
{
    "presets": [ // takes an array of arrays
        ["env",{
            "targets":{
                "browsers":[
                    "last 5 versions",
                    "ie >=8"
                ]
            }
        }]
    ]
}
